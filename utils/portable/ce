#!/bin/sh

toc_file='.code_evolution_toc'

function need_help {
    echo
    echo "code evolution -- present following code versions using git."
    echo "USAGE: ce init|first|previous|next|last"
    echo "  * init -> use current commit as final version. Create new branch"
    echo "    ending on this commit and move to oldest commit. Then you can"
    echo "    navigate using commands:"
    echo "  * first"
    echo "  * last"
    echo "  * previous"
    echo "  * next"
    exit 1
}

function test_git {
    git status &> /dev/null
    if [[ "$?" != "0" ]]; then
        echo "ce: works only in git managed directory."
        exit 1
    fi
}

function test_toc {
    if [[ ! -e $toc_file ]]; then
        echo "ce: no toc file($toc_file) found"
        exit 1
    fi
}

function init {
    git log --oneline > $toc_file
    first
}

function previous {
    test_toc

    total_hashes=$(wc -l $toc_file | cut -d' ' -f1)
    current_hash=$(git rev-parse --short HEAD)
    current_version=$(grep -n -m1 $current_hash $toc_file | cut -d: -f1 )
    if [[ "$?" != 0 ]]; then
        echo "ce: HEAD is not in toc file."
        exit 1;
    fi
    ((current_version++))
    if [[ $current_version -gt $total_hashes ]]; then
        echo "ce: already at the beginning of evolution. Have a nice day!"
        exit 1
    fi

    next_hash=$(head -$current_version $toc_file | tail -1 | cut -d' ' -f1)
    git checkout $next_hash > /dev/null
}

function next {
    test_toc

    current_hash=$(git rev-parse --short HEAD)
    current_version=$(grep -n -m1 $current_hash $toc_file | cut -d: -f1 )
    if [[ "$?" != 0 ]]; then
        echo "ce: HEAD is not in toc file."
        exit 1;
    fi
    ((current_version--))
    if [[ $current_version -le 0 ]]; then
        echo "ce: already at the end of evolution. Have a nice day!"
        exit 1
    fi

    next_hash=$(head -$current_version $toc_file | tail -1 | cut -d' ' -f1)
    git checkout $next_hash > /dev/null
}

function first {
    test_toc

    first_hash=$(tail -1 $toc_file | cut -d' ' -f1)
    git checkout $first_hash > /dev/null
}

function last {
    test_toc

    last_hash=$(head -1 $toc_file | cut -d' ' -f1)
    git checkout $last_hash > /dev/null
}

if [[ "$#" != 1 ]]; then
    need_help
fi

test_git

case $1 in
  "init") init;;
  "previous") previous;;
  "next") next;;
  "first") first;;
  "last") last;;
  *) need_help
esac
